name: Deploy Laravel API to Production Server

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: 8.3
        extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, dom, filter, gd, iconv, json, mbstring, pdo

    - name: Copy Environment File
      run: php -r "file_exists('.env') || copy('.env.example', '.env');"

    - name: Install Composer Dependencies
      run: composer install --optimize-autoloader --no-dev --no-progress --no-interaction --prefer-dist

    - name: Generate Application Key
      run: php artisan key:generate

    - name: Install Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'

    - name: Install NPM Dependencies
      run: npm install

    - name: Build NPM Assets
      run: npm run build

    - name: Create Backup on Server
      uses: appleboy/ssh-action@v0.1.6
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: ${{ secrets.VPS_PORT }}
        script: |
          cd /home/u868895797/domains/supracarer.com
          if [ -d "api" ]; then
            echo "Creating backup..."
            cp -r api api_backup_$(date +%Y%m%d_%H%M%S)
            echo "Backup created successfully"
          fi

    - name: Deploy Laravel Files
      uses: easingthemes/ssh-deploy@v2.1.5
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        SOURCE: "."
        REMOTE_HOST: ${{ secrets.VPS_HOST }}
        REMOTE_USER: ${{ secrets.VPS_USER }}
        REMOTE_PORT: ${{ secrets.VPS_PORT }}
        TARGET: "/home/u868895797/domains/supracarer.com/api"
        EXCLUDE: "/node_modules/, /.git/, /tests/, /.env.example, /.github/, /README.md, /.gitignore"

    - name: Deploy Public Folder
      uses: easingthemes/ssh-deploy@v2.1.5
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        SOURCE: "public/"
        REMOTE_HOST: ${{ secrets.VPS_HOST }}
        REMOTE_USER: ${{ secrets.VPS_USER }}
        REMOTE_PORT: ${{ secrets.VPS_PORT }}
        TARGET: "/home/u868895797/domains/supracarer.com/public_html/zipperapi"

    - name: Post-Deployment Setup
      uses: appleboy/ssh-action@v0.1.6
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: ${{ secrets.VPS_PORT }}
        script: |
          cd /home/u868895797/domains/supracarer.com/api

          # Backup current .env if it exists
          if [ -f .env ]; then
            cp .env .env.backup.$(date +%Y%m%d_%H%M%S)
          fi

          # Set proper permissions
          find . -type f -exec chmod 644 {} \;
          find . -type d -exec chmod 755 {} \;
          chmod -R 775 storage
          chmod -R 775 bootstrap/cache

          # Set .env permissions only if it exists
          if [ -f .env ]; then
            chmod 600 .env
          fi

          # Clear all caches first
          echo "Clearing caches..."
          php artisan config:clear || echo "Config clear failed, continuing..."
          php artisan route:clear || echo "Route clear failed, continuing..."
          php artisan cache:clear || echo "Cache clear failed, continuing..."
          php artisan view:clear || echo "View clear failed, continuing..."
          php artisan event:clear || echo "Event clear failed, continuing..."

          # Check if .env exists and is properly configured
          if [ ! -f .env ]; then
            echo "WARNING: .env file not found! Please create it manually."
          else
            echo ".env file found"
          fi

          # Run migrations
          echo "Running migrations..."
          php artisan migrate --force || echo "Migration failed, continuing..."

          # Rebuild caches for production
          echo "Building production caches..."
          php artisan config:cache || echo "Config cache failed, continuing..."
          php artisan route:cache || echo "Route cache failed, continuing..."
          php artisan view:cache || echo "View cache failed, continuing..."
          php artisan event:cache || echo "Event cache failed, continuing..."

          # Optimize for production
          echo "Optimizing application..."
          php artisan optimize || echo "Optimize failed, continuing..."

          # Update storage link if needed
          echo "Creating storage link..."
          php artisan storage:link || echo "Storage link failed, continuing..."


          echo "Deployment completed successfully!"

